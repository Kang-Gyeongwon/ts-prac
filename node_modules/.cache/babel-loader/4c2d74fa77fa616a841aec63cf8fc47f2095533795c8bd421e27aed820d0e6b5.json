{"ast":null,"code":"var _jsxFileName = \"/Users/gang-gyeong-won/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u1162/ts-prac/src/prac/prac01.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Prac01 = () => {\n  // 방법 1\n  let a = \"hello\";\n  a = \"bye\";\n  console.log(a); // 같은 문자열이기 때문에 가능\n  // a = 1  //Type 'number' is not assignable to type 'string'. 에러 발생\n  // 보통은 변수를 생성하고 타입을 변경하지 않게 됨\n  // typescript가 사용자를 위해서 타입을 추론해주고 있음\n\n  // 방법2\n  // tpyescript에게 구체적으로 type 지정해주기\n  // let b : boolean = \"x\";\n  // Type 'string' is not assignable to type 'boolean'. type 에러가 발생함\n  let b = false; // 이 방식이 type checker와 소통하는 방법\n  // typescript의 type checker에게 타입을 추론하는 것을 허용하고 싶으면 방법2를 사용해야함\n\n  let c = [1, 2, 3];\n  // c.push(\"1\")\n  // Argument of type 'string' is not assignable to parameter of type 'number'.\n  // 배열안에 숫자형이 들어가 있으로 반드시 숫자형을 넣어줘야함\n\n  // 배열안에 아무것도 들어있지 않을때\n  // number의 배열인것을 알려줘야함\n  let d = [];\n  // 명시적인 표현도 유용함 -> typescript가 타입을 추론하고 있지 못할때\n  // but! 명시적 표현은 최소한으로 사용하는게 좋음. \n\n  const player = {\n    name: \"nico\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"prac01\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n_c = Prac01;\nvar _c;\n$RefreshReg$(_c, \"Prac01\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Prac01","a","console","log","b","c","d","player","name","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gang-gyeong-won/Desktop/항해/ts-prac/src/prac/prac01.tsx"],"sourcesContent":["import React from \"react\";\n\nexport const Prac01 = () => {\n  // 방법 1\n  let a = \"hello\";\n  a = \"bye\";\n  console.log(a); // 같은 문자열이기 때문에 가능\n  // a = 1  //Type 'number' is not assignable to type 'string'. 에러 발생\n  // 보통은 변수를 생성하고 타입을 변경하지 않게 됨\n  // typescript가 사용자를 위해서 타입을 추론해주고 있음\n\n  // 방법2\n  // tpyescript에게 구체적으로 type 지정해주기\n  // let b : boolean = \"x\";\n  // Type 'string' is not assignable to type 'boolean'. type 에러가 발생함\n  let b: boolean = false; // 이 방식이 type checker와 소통하는 방법\n  // typescript의 type checker에게 타입을 추론하는 것을 허용하고 싶으면 방법2를 사용해야함\n\n  let c = [1, 2, 3];\n  // c.push(\"1\")\n  // Argument of type 'string' is not assignable to parameter of type 'number'.\n  // 배열안에 숫자형이 들어가 있으로 반드시 숫자형을 넣어줘야함\n\n  // 배열안에 아무것도 들어있지 않을때\n  // number의 배열인것을 알려줘야함\n  let d: number[] = [];\n  // 명시적인 표현도 유용함 -> typescript가 타입을 추론하고 있지 못할때\n  // but! 명시적 표현은 최소한으로 사용하는게 좋음. \n\n  const player = {\n    name: \"nico\"\n  }\n\n  return <div>prac01</div>;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B;EACA,IAAIC,CAAC,GAAG,OAAO;EACfA,CAAC,GAAG,KAAK;EACTC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC;EAChB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,IAAIG,CAAU,GAAG,KAAK,CAAC,CAAC;EACxB;;EAEA,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjB;EACA;EACA;;EAEA;EACA;EACA,IAAIC,CAAW,GAAG,EAAE;EACpB;EACA;;EAEA,MAAMC,MAAM,GAAG;IACbC,IAAI,EAAE;EACR,CAAC;EAED,oBAAOT,OAAA;IAAAU,QAAA,EAAK;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC1B,CAAC;AAACC,EAAA,GAhCWd,MAAM;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}